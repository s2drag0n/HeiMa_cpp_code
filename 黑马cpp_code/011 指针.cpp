#include <iostream>
using namespace std;

/*
====================================================================================================================================
指针：指向内存中一段内存
	1.定义方式：数据类型 * 指针变量; int * p;	p = &a;
	2.指针使用：通过解引用方式找到指针指向的内存。*p
====================================================================================================================================
指针占用内存空间：在32位操作系统下，占用4个字节空间；64位下占8个字节空间。
====================================================================================================================================
空指针：int* p = NULL;它指向内存中编号为0的空间，用于初始化指针变量，0-255的内存空间为系统占用内存，不可访问。
野指针：指针变量指向非法的内存空间。
两者都不是我们申请的空间，不要访问。
====================================================================================================================================
const修饰指针	
	1.const修饰指针--常量指针：指针的指向可以更改，指向的值不可更改		const int * p = &a；
	2.const修饰常量--指针常量：指针的指向不可更改，指向的值可以更改		int * const p = &a;
	3.const既修饰指针又修饰常量：指针的指向不可更改，指向的值不可更改	const int * const p = &a;
====================================================================================================================================
指针和数组：使用指针访问数组元素
指针和函数：利用指针作函数参数，可以修改实参的值
====================================================================================================================================
注意指针传参时并未传递缓冲区的大小，所以传递之后不可以使用sizeof()函数判断参数大小
*/

int main() {

	//指针配合数组和函数练习：封装一个函数，利用冒泡排序，实现对整型数组的升序排序

	return 0;
}